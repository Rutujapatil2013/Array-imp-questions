// Not handling duplicate element

#include<bits/stdc++.h>
using namespace std;
void print_intersection(int arr1[],int arr2[],int m,int n)
{
    int i=0,j=0;
    while(i<m && j<n)
    {
        if(arr1[i] < arr2[j])
            i++;
        else if(arr2[j] < arr1[i])
            j++;
        else
        {
            cout<<arr2[j]<<" ";
            i++;
            j++;
        }
    }
}
int main()
{
    int arr1[]={1,4,6,8,10,10};
    int arr2[]={2,3,4,5,7,8,9,10,10};
    int m=sizeof(arr1)/sizeof(arr1[0]);
    int n=sizeof(arr2)/sizeof(arr2[0]);
    print_intersection(arr1,arr2,m,n);
}

Output:
4 8 10 10
Time Complexity : O(m + n)
Auxiliary Space: O(1)
______________________________________________________________
// Handling duplicate element

#include <bits/stdc++.h>
using namespace std;

void print_intersection(int arr1[], int arr2[], int m, int n)
{
    int i = 0, j = 0;
    set<int> s;
    while (i < m && j < n) 
    {
        if (arr1[i] < arr2[j])
            i++;
        else if (arr2[j] < arr1[i])
            j++;
        else 
        {
            s.insert(arr2[j]);   
            i++;
            j++;
        }
    }
    for(auto itr: s)  
    {
        cout<<itr<<" ";
        }
}

//Driver code
int main()
{
    int arr1[] = { 1, 2, 2, 3, 4 ,10,10};
    int arr2[] = { 2, 2, 4, 6, 7, 8 ,10,10};
    int m = sizeof(arr1) / sizeof(arr1[0]);
    int n = sizeof(arr2) / sizeof(arr2[0]);
    print_intersection(arr1, arr2, m, n);
 
    return 0;
}

Output:
2 4 
Time Complexity : O(m + n) 
Auxiliary Space : O(min(m, n))
